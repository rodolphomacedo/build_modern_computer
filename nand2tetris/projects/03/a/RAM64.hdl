// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];
    
    PARTS:
      DMux8Way(in=load, sel=address[3..5], a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh);
     
      RAM8(in=in, load=outa, address=address[0..2], out=rama);
      RAM8(in=in, load=outb, address=address[0..2], out=ramb);
      RAM8(in=in, load=outc, address=address[0..2], out=ramc);
      RAM8(in=in, load=outd, address=address[0..2], out=ramd);
      RAM8(in=in, load=oute, address=address[0..2], out=rame);
      RAM8(in=in, load=outf, address=address[0..2], out=ramf); 
      RAM8(in=in, load=outg, address=address[0..2], out=ramg);
      RAM8(in=in, load=outh, address=address[0..2], out=ramh);

      Mux8Way16(a=rama, b=ramb, c=ramc, d=ramd, e=rame, f=ramf, g=ramg, h=ramh, sel=address[3..5], out=out);
}
